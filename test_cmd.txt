---

### ROS Környezet Ellenőrző Parancsok

A ROS (Robot Operating System) környezet ellenőrzésére számos beépített parancs használható. Ezek a parancsok lehetővé teszik a csomópontok, topikok és szolgáltatások kapcsolatainak és működésének részletes vizsgálatát.

1. **`rosnode list`**
   - **Funkciója:** Kilistázza az összes aktív csomópontot a ROS környezetben.
   - **Mit tudhatunk meg belőle:** Ez a parancs gyors áttekintést nyújt arról, hogy mely csomópontok futnak, és segít ellenőrizni, hogy a szükséges csomópontok megfelelően elindultak-e.

2. **`rosnode info /node_name`**
   - **Funkciója:** Részletes információkat ad egy adott csomópontról.
   - **Mit tudhatunk meg belőle:** Megjeleníti a csomópont által publikált és előfizetett topikokat, valamint az általa használt szolgáltatásokat. Ez hasznos a csomópontok közötti kommunikációs problémák feltárásában.

3. **`rostopic list`**
   - **Funkciója:** Kilistázza az összes aktív topikot a ROS környezetben.
   - **Mit tudhatunk meg belőle:** Segít ellenőrizni, hogy a szükséges topikok léteznek-e, és hogy a csomópontok a megfelelő adatokat publikálják.

4. **`rostopic info /topic_name`**
   - **Funkciója:** Részletes információkat ad egy adott topikról.
   - **Mit tudhatunk meg belőle:** Megjeleníti a topik típusát, valamint az azt publikáló és előfizető csomópontokat. Ez a parancs hasznos a kommunikációs kapcsolatok feltérképezésére.

5. **`rostopic type /topic_name`**
   - **Funkciója:** Megmutatja az adott topik üzenettípusát.
   - **Mit tudhatunk meg belőle:** Segít megérteni az adott topikon közzétett üzenetek szerkezetét, ami fontos az adat értelmezéséhez vagy hibaelhárításhoz.

6. **`rostopic echo /topic_name`**
   - **Funkciója:** A topikon közzétett üzeneteket jeleníti meg a terminálon.
   - **Mit tudhatunk meg belőle:** Lehetővé teszi az élő adatok megtekintését egy topikon, ami elengedhetetlen annak ellenőrzéséhez, hogy a topik a várt adatokat publikálja-e.

7. **`rosservice list`**
   - **Funkciója:** Kilistázza az összes elérhető szolgáltatást a ROS környezetben.
   - **Mit tudhatunk meg belőle:** Áttekintést nyújt az összes futó szolgáltatásról, amelyekkel különféle műveleteket lehet végrehajtani, például csomópontok újraindítását vagy paraméterek beállítását.

8. **`rosservice info /service_name`**
   - **Funkciója:** Részletes információkat nyújt egy adott szolgáltatásról.
   - **Mit tudhatunk meg belőle:** Megmutatja a szolgáltatás paramétereit és azt, hogy mely csomópont(ok) kínálják azt, ami segíthet a szolgáltatások közötti hibák azonosításában.

9. **`roswtf`**
   - **Funkciója:** Diagnosztikai eszköz, amely ellenőrzi a teljes ROS környezetet és jelentést készít az esetleges problémákról.
   - **Mit tudhatunk meg belőle:** Felismeri a csomópontok közötti kapcsolat problémáit, figyelmeztet a lehetséges hibákra, és jelzi az elérhetetlen szolgáltatásokat vagy nem csatlakozó topikokat.

10. **`rqt_graph`**
   - **Funkciója:** Grafikus eszköz a ROS csomópontok és topikok kapcsolatainak megjelenítésére.
   - **Mit tudhatunk meg belőle:** Lehetővé teszi a kommunikációs hálózat áttekintését, vizuálisan megjelenítve a csomópontok és topikok közötti adatáramlást, amely segít az esetleges kapcsolatproblémák felismerésében.



Statikus transform
 rosrun tf static_transform_publisher 0 0 0 0 0 0 1 map base_link 10
 
 
 rosnode info /rosout

rosservice call /rosout/set_logger_level "{logger: 'rosout', level: 'debug'}"
rosservice call /gazebo/set_logger_level "{logger: 'rosout', level: 'debug'}"
rosservice call /gym_gazebo_env_1606_1731216704168/set_logger_level "{logger: 'rosout', level: 'debug'}"


rosrun topic_tools relay /burger/scan /scan

roslaunch turtlebot3_navigation turtlebot3_navigation.launch map_file:=$HOME/map.yaml

roslaunch turtlebot3_slam turtlebot3_slam.launch



